# #Problem 44
# #================

# =begin

# Pentagonal numbers are generated by the formula, Pn=n(3n1)/2. The first ten pentagonal numbers are:

# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70  22 = 48, is not pentagonal.

# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference is pentagonal and D = |Pk  Pj| is minimised; what is the value of D?


# =end

# timer_start = Time.now

# class PentagonalNumber
# 	attr_accessor :value

# 	def initialize(n)
# 		@value = pentagonal(n)
# 	end

# 	def self.take(n)
# 		i=0
# 		numbers = []
# 		while i<n
# 			numbers << pentagonal(i)
# 		end
# 		numbers
# 	end
	
# 	def pentagonal?

# 	end

# 	private
# 	def pentagonal(n)
# 		(n*(3*n - 1))/2
# 	end
# end

# #difference

# # k(3k-1)/2 - n(3n-1)/2 
# # ((3k^2 - k- 3n^2 + n) /2
# # (3k^2 - 3n^2      -k + n	) /2

# # 3*(k-n)^2 = 3(k^2 - 2nk - n^2) = 3k^2 - 6nk - 3n^2
# # 3*(k-n)^2 + 6nk = 3k^2 - 3n^2
# # (3*(k-n)^2 + 6nk -k + n)/2

# def pent_sum(n,k)
# 	(3*(n+k)**2 - 6*n*k -n  - k)/2
# end

# def pent_difference(n,k)	
# 	(PentagonalNumber.new(n).value - PentagonalNumber.new(k).value).abs
# end

# def pentagonal?(n)
# 	test = 24*n + 1
# 	Math.sqrt(test).to_s.split(//)[-2..-1].join==".0"
# end

# combos = []

# (1..10000).each{|i|
# 	(i+1..i+10).each{|j|
# 		both_pent = pentagonal?(pent_sum(i,j)) && pentagonal?(pent_difference(i,j))
# 		if both_pent
# 			combos<<[i,j]
# 		end
# 	}
# }

# def d_me(j,k)
# 	pj = PentagonalNumber.new(j).value
# 	pk = PentagonalNumber.new(k).value
# 	(pk-pj).abs 
# end

# combos.each{
# 	|x| p d_me(x[0], x[1])
# }

# p PentagonalNumber.new(135).value

# p "It took #{(Time.now-timer_start)*1000} milliseconds"


# Euler 44
# http://projecteuler.net/index.php?section=problems&id=44
# Pentagonal numbers are generated by the formula,
# Pn=n(3n1)/2. The first ten pentagonal numbers are:
#
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However,
# their difference, 70 - 22 = 48, is not pentagonal.
#
# Find the pair of pentagonal numbers, Pj and Pk, for which
# their sum and difference is pentagonal and D = |Pk - Pj|
# is minimised; what is the value of D?
timer_start = Time.now

class Integer
  def pentagonal
    return self*(3*self-1)/2
  end

  # http://en.wikipedia.org/wiki/Pentagonal_number
  # If n is a natural number, then x is the nth pentagonal
  # number. If result is not a natural number,
  # then self is not pentagonal.
  def pentagonal?
    return ((Math.sqrt(24*self + 1) + 1) / 6) % 1.0 == 0.0;
  end

  # http://drawohara.com/post/117643208/
  # ruby-integer-max-and-integer-min
  N_BYTES = [42].pack('i').size
  N_BITS = N_BYTES * 8
  MAX = 2 ** (N_BITS - 2) - 1
  MIN = -MAX - 1
end

# Another upper bound guess
upper_bound = 5000
answer = Integer::MAX

1.upto(upper_bound) do |j|
  (j+1).upto(upper_bound) do |k|
    pk, pj = k.pentagonal, j.pentagonal
    d = pk - pj

    break if d > answer
    next if !d.pentagonal?

    s = pj + pk
    if s.pentagonal? then
      answer = d
    end
  end
end

puts answer
puts "Elapsed Time: #{(Time.now - timer_start)*1000} milliseconds"
