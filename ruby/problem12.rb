#!/usr/bin/env ruby

# Problem 12

=begin
  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
  
  Let us list the factors of the first seven triangle numbers:
  
   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.
  
  What is the value of the first triangle number to have over five hundred divisors?

=end

require 'mathn'

class Integer
  def triangular?
    self*(self+1)/2
  end

  def number_of_factors
    factors = Prime.prime_division(self)
    factors.inject(1) { |n,x| n*((x.last) +1) } # Making use of prime factorisation and the rule of multiplying the exponents plus one
  end
end

class Triangular
  def self.nth n
    n * (n+1)/2
  end

  def self.take n
    (1..n).map {|i| self.nth i }  
  end

  def self.take_while(&block)
    nums = []
    i = 0
    begin 
      nums << self.nth(i)
      i += 1 
    end while yield nth(i)
    nums
  end 
end

timer_start = Time.now

answer = 1
i  = 1
begin
  answer = Triangular.nth(i)
  i += 1 
end until answer.number_of_factors > 500

puts "12. #{answer} (#{Time.now - timer_start} ms)"
